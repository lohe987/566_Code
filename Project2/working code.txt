#include <iostream>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include "mpi.h"
using namespace std;
#define row 16
#define col 16

void main(int argc, char* argv[]) {

	int i, j,k, y, my_id, nprocs;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &my_id);	// get my_id for each procs
	MPI_Comm_size(MPI_COMM_WORLD, &nprocs); // # of total procs.
	int *worldMap = new int[row];
	for (i = 0; i < row; i++) {
		worldMap[i] = i%nprocs;
	}
	double **array = new double*[row];
	double **mat_ik = new double*[row / sqrt(nprocs)];
	double **mat_kj = new double*[row / sqrt(nprocs)];
	int my_row_begin, my_row_end;
	int my_col_begin, my_col_end;
	int n_per_row = row / sqrt(nprocs);
	my_row_begin = my_id * n_per_row;
	my_row_end = my_row_begin + n_per_row - 1;
	if (my_id == nprocs - 1 && (row - (my_row_end + 1)) > 0)   my_row_end = row - 1;
	// Make array
	for (i = 0; i < row; i++) {
		array[i] = new double[row];
		
	}
	double current = 2.1;
	for (i = 0; i < row; i++) {
		current = (double)rand() / (double)RAND_MAX;
		for (j = 0; j < col; j++) {
			array[i][j] = current;
			current = current + (double)rand() / (double)RAND_MAX;
			//if(my_id==0) cout << "array" << i << " " << j << " " << array[i][j] << endl;
		}
	}
	if (my_id == 0) {
		for (i = 0; i < row; i++) {
			//cout << " " << array[i][i];
		}
	}
	cout << endl;
	//Make array
	int current_proc = 0;
	for ( k = 0; k < row; k++) {
		current_proc = worldMap[k];
		if (current_proc == my_id){
			for (i = k + 1; i < row; i++) {
				//cout << "before "<<" " << i<< " "<<k << " " <<array[i][k] <<"/"<<array[k][k]<< endl;
				array[i][k] = array[i][k] / array[k][k];
				//cout << "after" << array[i][k] << "/" << array[k][k] << endl;
			}
		}
		
		//if (current_proc == my_id) cout << " master " << array[k][k] << endl;
		MPI_Bcast(&array[k][k], row - k, MPI_DOUBLE, current_proc, MPI_COMM_WORLD);
		//cout << " slave"<<my_id<< "  " << array[k][k] << endl;
		for ( i = k+1; i < row; i++) {
			if (current_proc == my_id) {
				for ( j = k+1; j < row; j++) {
					//cout << array[i][j] << "-" << array[i][k] << "*" << array[k][j] << endl;
					array[i][j] = array[i][j] - array[i][k] * array[k][j];
					//cout << "array " << i << " " << j << " ="<< array[i][k]<< endl;
				}
			}
		}
	}




	double det;
	if (my_id == 0) {
		cout << "Total Processors: " << nprocs << endl;
		cout << "Dimension of matrix: " << row << "x" << col << endl;
		det = array[0][0];
		for (i = 1; i < row; i++) {
			det = det*array[i][i];
		}
		cout << "DET" << det << endl;
	}
	







	MPI_Finalize();


}